1. 研究背景与意义
首先，介绍为什么需要本地知识库问答系统。随着企业和组织积累了大量的内部知识（如文档、指南、操作手册、技术资料等），如何有效地获取这些信息成为一个挑战。传统的检索方式难以满足用户快速获取信息的需求，问答系统可以提供更直观、便捷的方式来获取信息。
在这里，可以简要提到qanything的作用，它是一个开源框架，可以快速搭建支持自然语言查询的问答系统。利用它能够提高开发效率，适用于快速构建知识库问答场景。

随着大模型技术的发展，在应用领域的逐渐聚焦于两个方向 RAG 和 Agent， RAG 是 LLM 中最典型也是最流行的设计模式，其全称是 Retrieval Augmented Generation，可以被翻译成 检索增强生成技术，从标题上也能了解其核心的流程 检索 => 增强 => 生成。
2. RAG介绍
2. qanything介绍
接着，简单介绍一下qanything。qanything是一个基于大语言模型（LLM）的问答系统框架，它支持与本地知识库集成，帮助用户快速获取相关信息。qanything可以灵活地整合现有知识数据，并生成智能化的问答接口，从而实现人机交互。此框架的优势在于其兼容性高、易于部署且支持定制，适合需要将内部文档或知识库转化为问答系统的场景。
3. 系统功能概述
本地知识库问答系统的核心功能包括：
•	知识库导入：可以将多种格式的文件（如PDF、Word、Excel等）导入到知识库中，供问答系统调用。
•	智能问答：用户可以通过自然语言输入问题，系统将解析问题并从知识库中检索相关答案。
•	数据更新与维护：知识库内容可以定期更新，保持问答系统的信息准确性和时效性。
•	权限管理（可选）：可以根据用户角色设定不同的访问权限，以确保信息安全。
4. 技术架构
•	数据处理：解析和预处理本地知识库的数据，以便更好地与qanything框架进行集成。
•	模型选择：可以选择合适的模型进行问答，如基于大语言模型或针对特定领域微调的模型。
•	问答模块：基于qanything的API实现智能问答，负责接收用户输入的问题并返回最佳答案。
•	前端界面：提供友好的用户界面，便于用户进行问题输入和答案查看。
5. 系统实现流程
描述系统的具体实现流程，例如：
•	知识库的数据采集与整理；
•	数据导入qanything系统并建立索引；
•	配置问答模型及系统参数；
•	部署系统并进行测试和优化。
服务器购买
MySQL 容器化部署
docker run -d \
  --name mysql-container \
  -e MYSQL_ROOT_PASSWORD=root \
  -e MYSQL_DATABASE=mydb \
  -e MYSQL_USER=user \
  -e MYSQL_PASSWORD=password \
  -p 3306:3306 \
  -v mysql_data:/var/lib/mysql \
  mysql:8.0

•  -d：后台运行容器
•  --name mysql-container：容器名称
•  -e MYSQL_ROOT_PASSWORD=root：设置 root 用户密码
•  -e MYSQL_DATABASE=mydb：创建名为 mydb 的数据库
•  -e MYSQL_USER=user：创建用户 user
•  -e MYSQL_PASSWORD=password：用户 user 的密码
•  -p 3306:3306：将 MySQL 端口映射到宿主机
•  -v mysql_data:/var/lib/mysql：数据持久化
 
查看日志
 

本机远程连接数据库
mysql -h 120.46.199.75 -P 3306 -u root -p
创建数据表
CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT COMMENT '用户ID',
    username VARCHAR(50) NOT NULL UNIQUE COMMENT '用户名',
    password VARCHAR(255) NOT NULL COMMENT '密码（加密存储）',
    role ENUM('admin', 'user') NOT NULL DEFAULT 'user' COMMENT '用户角色（admin/user）',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户表';

插入数据
INSERT INTO users (username, password, role) VALUES
('admin_user', 'hashed_password_1', 'admin'),
('normal_user', 'hashed_password_2', 'user');

测试注册接口


文件预览：
前端请求接口获取base64
@Post('getFileBase64')
  getFileBase64(@Body() getFileBase64: GetFileBase64Dto) {
    return this.filesService.getFileBase64(getFileBase64);
  }

getFileBase64(getFileBase64: GetFileBase64Dto) {
    const { fileName } = getFileBase64;
    const filePath = `./uploads/${fileName}`;
    if (!existsSync(filePath)) {
      throw new BadRequestException({
        code: '404',
        message: '文件不存在',
      });
    }

    const fileExt = fileName.split('.')[1].toLowerCase();

    // 根据文件后缀判断 MIME 类型
    const mimeType = getMimeType(fileExt);

    // 读取文件并转换为 base64
    const fileData = readFileSync(filePath);
    const base64Data = fileData.toString('base64');

    return {
      code: 200,
      message: '获取成功',
      data: {
        fileName,
        ext: fileExt,
        base64: `data:${mimeType};base64,${base64Data}`,
      },
    };
  }


原方案，使用get请求服务端，然后将html返回给前端展示
@Get('preview/:fileName')
  previewFile(@Param('fileName') fileName: string, @Res() res: Response) {
    return this.filesService.previewFile(fileName, res);
  }
previewFile(fileName: string, res: Response) {
    try {
      // const filePath = `${process.env.BASE_URL}:${process.env.PORT}/uploads/${fileName}`;
      // console.log(filePath);
      // res.redirect(filePath);
      const fileUrl = `${process.env.BASE_URL}:${process.env.PORT}/uploads/${fileName}`;
      const googleDocsViewerUrl = `https://view.officeapps.live.com/op/view.aspx?src=${encodeURIComponent(fileUrl)}`;

      const htmlContent = `
        <html>
          <body style="margin: 0;"> 
            <iframe src="${googleDocsViewerUrl}" width="100%" height="100%" style="border: none;"></iframe>
          </body>
        </html>
      `;

      res.setHeader('Content-Type', 'text/html');
      res.send(htmlContent);
    } catch (error) {
      if (error instanceof NotFoundException) {
        res.status(404).send(error.message);
      } else {
        res.status(500).send('文件预览失败');
      }
    }
  }

现方案，服务端直接静态资源共享，前端直接访问这个src
app.use('/uploads', serveStatic(join(__dirname, '..', 'uploads')));

6. 系统优点与应用场景
说明基于qanything实现的本地知识库问答系统相较于传统检索方式的优势，如：
•	智能化查询：能够基于自然语言理解提供准确的答案；
•	本地部署：可以保护数据隐私，适用于对数据安全性要求较高的场景；
•	快速响应：支持大批量数据的快速查询与响应。
应用场景包括企业内部文档查询、员工培训知识库、技术支持问答、公共服务知识库等。
7. 展望
可以提到未来可能的拓展方向，例如：
•	进一步提升问答准确率的模型微调；
•	增加多语言支持，方便跨语言的知识查询；
•	引入深度学习模型，实现对知识库数据的自动化更新。

